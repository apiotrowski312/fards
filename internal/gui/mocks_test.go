// Code generated by MockGen. DO NOT EDIT.
// Source: gui.go

// Package gui_test is a generated GoMock package.
package gui_test

import (
	reflect "reflect"

	fyne "fyne.io/fyne/v2"
	logic "github.com/apiotrowski312/fards/internal/logic"
	models "github.com/apiotrowski312/fards/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockdecksStore is a mock of decksStore interface.
type MockdecksStore struct {
	ctrl     *gomock.Controller
	recorder *MockdecksStoreMockRecorder
}

// MockdecksStoreMockRecorder is the mock recorder for MockdecksStore.
type MockdecksStoreMockRecorder struct {
	mock *MockdecksStore
}

// NewMockdecksStore creates a new mock instance.
func NewMockdecksStore(ctrl *gomock.Controller) *MockdecksStore {
	mock := &MockdecksStore{ctrl: ctrl}
	mock.recorder = &MockdecksStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdecksStore) EXPECT() *MockdecksStoreMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockdecksStore) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockdecksStoreMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockdecksStore)(nil).Delete), id)
}

// Get mocks base method.
func (m *MockdecksStore) Get() models.DecksList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(models.DecksList)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockdecksStoreMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockdecksStore)(nil).Get))
}

// Upsert mocks base method.
func (m *MockdecksStore) Upsert(deck models.DecksListEntry) (models.DecksListEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", deck)
	ret0, _ := ret[0].(models.DecksListEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upsert indicates an expected call of Upsert.
func (mr *MockdecksStoreMockRecorder) Upsert(deck interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockdecksStore)(nil).Upsert), deck)
}

// MockcategoriesStore is a mock of categoriesStore interface.
type MockcategoriesStore struct {
	ctrl     *gomock.Controller
	recorder *MockcategoriesStoreMockRecorder
}

// MockcategoriesStoreMockRecorder is the mock recorder for MockcategoriesStore.
type MockcategoriesStoreMockRecorder struct {
	mock *MockcategoriesStore
}

// NewMockcategoriesStore creates a new mock instance.
func NewMockcategoriesStore(ctrl *gomock.Controller) *MockcategoriesStore {
	mock := &MockcategoriesStore{ctrl: ctrl}
	mock.recorder = &MockcategoriesStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcategoriesStore) EXPECT() *MockcategoriesStoreMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockcategoriesStore) Add(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockcategoriesStoreMockRecorder) Add(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockcategoriesStore)(nil).Add), name)
}

// GetAll mocks base method.
func (m *MockcategoriesStore) GetAll() models.Categories {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].(models.Categories)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockcategoriesStoreMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockcategoriesStore)(nil).GetAll))
}

// Remove mocks base method.
func (m *MockcategoriesStore) Remove(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockcategoriesStoreMockRecorder) Remove(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockcategoriesStore)(nil).Remove), id)
}

// Rename mocks base method.
func (m *MockcategoriesStore) Rename(id, newName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rename", id, newName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rename indicates an expected call of Rename.
func (mr *MockcategoriesStoreMockRecorder) Rename(id, newName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rename", reflect.TypeOf((*MockcategoriesStore)(nil).Rename), id, newName)
}

// Mockrouter is a mock of router interface.
type Mockrouter struct {
	ctrl     *gomock.Controller
	recorder *MockrouterMockRecorder
}

// MockrouterMockRecorder is the mock recorder for Mockrouter.
type MockrouterMockRecorder struct {
	mock *Mockrouter
}

// NewMockrouter creates a new mock instance.
func NewMockrouter(ctrl *gomock.Controller) *Mockrouter {
	mock := &Mockrouter{ctrl: ctrl}
	mock.recorder = &MockrouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockrouter) EXPECT() *MockrouterMockRecorder {
	return m.recorder
}

// CleanPopup mocks base method.
func (m *Mockrouter) CleanPopup() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CleanPopup")
}

// CleanPopup indicates an expected call of CleanPopup.
func (mr *MockrouterMockRecorder) CleanPopup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanPopup", reflect.TypeOf((*Mockrouter)(nil).CleanPopup))
}

// Pop mocks base method.
func (m *Mockrouter) Pop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Pop")
}

// Pop indicates an expected call of Pop.
func (mr *MockrouterMockRecorder) Pop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pop", reflect.TypeOf((*Mockrouter)(nil).Pop))
}

// Push mocks base method.
func (m *Mockrouter) Push(screen logic.Layoutable) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Push", screen)
}

// Push indicates an expected call of Push.
func (mr *MockrouterMockRecorder) Push(screen interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*Mockrouter)(nil).Push), screen)
}

// Reload mocks base method.
func (m *Mockrouter) Reload() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reload")
}

// Reload indicates an expected call of Reload.
func (mr *MockrouterMockRecorder) Reload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*Mockrouter)(nil).Reload))
}

// SetPopup mocks base method.
func (m *Mockrouter) SetPopup(content fyne.CanvasObject) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPopup", content)
}

// SetPopup indicates an expected call of SetPopup.
func (mr *MockrouterMockRecorder) SetPopup(content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPopup", reflect.TypeOf((*Mockrouter)(nil).SetPopup), content)
}

// MockcardsStore is a mock of cardsStore interface.
type MockcardsStore struct {
	ctrl     *gomock.Controller
	recorder *MockcardsStoreMockRecorder
}

// MockcardsStoreMockRecorder is the mock recorder for MockcardsStore.
type MockcardsStoreMockRecorder struct {
	mock *MockcardsStore
}

// NewMockcardsStore creates a new mock instance.
func NewMockcardsStore(ctrl *gomock.Controller) *MockcardsStore {
	mock := &MockcardsStore{ctrl: ctrl}
	mock.recorder = &MockcardsStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcardsStore) EXPECT() *MockcardsStoreMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockcardsStore) Add(front, back string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", front, back)
}

// Add indicates an expected call of Add.
func (mr *MockcardsStoreMockRecorder) Add(front, back interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockcardsStore)(nil).Add), front, back)
}

// GetCard mocks base method.
func (m *MockcardsStore) GetCard() (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCard")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// GetCard indicates an expected call of GetCard.
func (mr *MockcardsStoreMockRecorder) GetCard() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCard", reflect.TypeOf((*MockcardsStore)(nil).GetCard))
}

// GetStats mocks base method.
func (m *MockcardsStore) GetStats() (int, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats.
func (mr *MockcardsStoreMockRecorder) GetStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockcardsStore)(nil).GetStats))
}

// Next mocks base method.
func (m *MockcardsStore) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockcardsStoreMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockcardsStore)(nil).Next))
}

// Previous mocks base method.
func (m *MockcardsStore) Previous() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Previous")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Previous indicates an expected call of Previous.
func (mr *MockcardsStoreMockRecorder) Previous() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Previous", reflect.TypeOf((*MockcardsStore)(nil).Previous))
}

// RemoveCurrentCard mocks base method.
func (m *MockcardsStore) RemoveCurrentCard() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveCurrentCard")
}

// RemoveCurrentCard indicates an expected call of RemoveCurrentCard.
func (mr *MockcardsStoreMockRecorder) RemoveCurrentCard() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCurrentCard", reflect.TypeOf((*MockcardsStore)(nil).RemoveCurrentCard))
}

// Shuffle mocks base method.
func (m *MockcardsStore) Shuffle() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shuffle")
}

// Shuffle indicates an expected call of Shuffle.
func (mr *MockcardsStoreMockRecorder) Shuffle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shuffle", reflect.TypeOf((*MockcardsStore)(nil).Shuffle))
}

// Update mocks base method.
func (m *MockcardsStore) Update(front, back string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", front, back)
}

// Update indicates an expected call of Update.
func (mr *MockcardsStoreMockRecorder) Update(front, back interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockcardsStore)(nil).Update), front, back)
}
